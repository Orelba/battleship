{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/./src/modules/ship.js","webpack://battleship/./src/modules/gameboard.js","webpack://battleship/./src/modules/player.js","webpack://battleship/./src/modules/UI.js","webpack://battleship/./src/modules/game.js","webpack://battleship/./src/index.js"],"sourcesContent":["const Ship = (length) => {\r\n  if (typeof length !== 'number') throw new Error('You must pass a number as the length argument to Ship()')\r\n  if (length < 2 || length > 6) throw new Error('Ship length must be between 2 to 6')\r\n\r\n  return {\r\n    length,\r\n    hitCount: 0,\r\n    hit() { this.hitCount += 1 },\r\n    isSunk() { return this.hitCount >= this.length },\r\n  }\r\n}\r\n\r\nexport default Ship\r\n","const Gameboard = () => {\r\n  // .map is used here to pass new instances of the object (.fill passes references)\r\n  const board = new Array(100).fill().map(() => ({ hasShip: false, isShot: false }))\r\n\r\n  const convertTo2DIndex = (index1D) => {\r\n    const indexStr = index1D.toString()\r\n    let row\r\n    let col\r\n\r\n    if (indexStr.length === 1) {\r\n      col = Number(indexStr[0])\r\n      row = 0\r\n    } else {\r\n      row = Number(indexStr[0])\r\n      col = Number(indexStr[1])\r\n    }\r\n    return [row, col]\r\n  }\r\n\r\n  const createLocationArray = (ship, location, axis) => {\r\n    const locationArray = []\r\n    for (let i = 0; i < ship.length; i += 1) {\r\n      if (axis === 'x') {\r\n        locationArray.push(location + i)\r\n      } else {\r\n        locationArray.push(location + i * 10)\r\n      }\r\n    }\r\n    return locationArray\r\n  }\r\n\r\n  const getNeighborArray = (shipLocationArray) => {\r\n    const surroundings = new Set()\r\n    const neighborPattern = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]\r\n    const boardSize = 10\r\n\r\n    // Add indexes of neighbor cells to the set\r\n    for (let i = 0; i < shipLocationArray.length; i += 1) {\r\n      const locationIndex2D = convertTo2DIndex(shipLocationArray[i])\r\n\r\n      for (let n = 0; n < neighborPattern.length; n += 1) {\r\n        const x = neighborPattern[n][0] + locationIndex2D[0]\r\n        const y = neighborPattern[n][1] + locationIndex2D[1]\r\n        const boardMaxIndexSize = boardSize - 1\r\n        if (x < 0 || x > boardMaxIndexSize || y < 0 || y > boardMaxIndexSize) {\r\n          // eslint-disable-next-line no-continue\r\n          continue\r\n        }\r\n        // Convert back to 1D array index and add to the set\r\n        surroundings.add(Number([x, y].join('')))\r\n      }\r\n    }\r\n\r\n    // Filter out the indexes of ship cells from the set\r\n    surroundings.forEach((num) => {\r\n      if (shipLocationArray.includes(num)) surroundings.delete(num)\r\n    })\r\n\r\n    return Array.from(surroundings)\r\n  }\r\n\r\n  const checkCollisions = (shipLocationArray) => {\r\n    const collisions = [9, 19, 29, 39, 49, 59, 69, 79, 89]\r\n    // Check if ship placement exceeds board boundries (y axis collisions)\r\n    if (shipLocationArray.some((loc) => !board[loc])) return false\r\n\r\n    // Check collisions with other ships\r\n    if (shipLocationArray.some((loc) => board[loc].hasShip)) return false\r\n\r\n    // Check collisions with the x axis\r\n    // eslint-disable-next-line max-len\r\n    if (collisions.some((n) => [n, n + 1].every((indexes) => shipLocationArray.includes(indexes)))) return false\r\n\r\n    // No collisions found\r\n    return true\r\n  }\r\n\r\n  const checkIfNeighborCellsAreEmpty = (shipNeighborArray) => {\r\n    if (shipNeighborArray.some((neighborIdx) => board[neighborIdx].hasShip)) return false\r\n    return true\r\n  }\r\n\r\n  const isPlacementValid = (ship, location, axis) => {\r\n    const locationArray = createLocationArray(ship, location, axis)\r\n    const neighbors = getNeighborArray(locationArray)\r\n\r\n    if (checkCollisions(locationArray) && checkIfNeighborCellsAreEmpty(neighbors)) return true\r\n    return false\r\n  }\r\n\r\n  const placeShip = (ship, location, axis = 'x') => {\r\n    const locationArray = createLocationArray(ship, location, axis)\r\n\r\n    if (!isPlacementValid(ship, location, axis)) {\r\n      throw new Error(`Placement of ship of length ${ship.length} at index ${location} on axis ${axis.toUpperCase()} is not valid.`)\r\n    }\r\n\r\n    locationArray.forEach((loc) => {\r\n      board[loc].hasShip = ship\r\n    })\r\n    return true\r\n  }\r\n\r\n  const placeShipInRandomLocation = (ship) => {\r\n    // Invalid location to start the loop\r\n    let randomLoc = 99\r\n    let axis = 'x'\r\n\r\n    while (!isPlacementValid(ship, randomLoc, axis)) {\r\n      randomLoc = Math.floor(Math.random() * 98)\r\n      axis = (Math.random() > 0.5) ? 'x' : 'y'\r\n    }\r\n\r\n    placeShip(ship, randomLoc, axis)\r\n  }\r\n\r\n  const checkIfShotHit = (location) => !!(board[location].hasShip)\r\n\r\n  const receiveAttack = (location) => {\r\n    if (checkIfShotHit(location)) board[location].hasShip.hit()\r\n    board[location].isShot = true\r\n  }\r\n\r\n  const isGameOver = () => {\r\n    const shipSet = new Set()\r\n    let sunkShipsCounter = 0\r\n\r\n    board.forEach((cell) => {\r\n      if (cell.hasShip) shipSet.add(cell.hasShip)\r\n    })\r\n\r\n    shipSet.forEach((ship) => {\r\n      if (ship.isSunk()) sunkShipsCounter += 1\r\n    })\r\n\r\n    return shipSet.size === sunkShipsCounter\r\n  }\r\n\r\n  return {\r\n    board,\r\n    createLocationArray,\r\n    getNeighborArray,\r\n    checkCollisions,\r\n    isPlacementValid,\r\n    placeShip,\r\n    placeShipInRandomLocation,\r\n    checkIfShotHit,\r\n    receiveAttack,\r\n    isGameOver,\r\n  }\r\n}\r\n\r\nexport default Gameboard\r\n","const Player = (name) => {\r\n  const generateRandomLocFromArray = (array) => array[Math.floor(Math.random() * array.length)]\r\n\r\n  const attack = (location, gameboard) => {\r\n    if (gameboard.board[location].isShot) return false\r\n    gameboard.receiveAttack(location)\r\n    return true\r\n  }\r\n\r\n  const makeRandomAttack = (gameboard) => {\r\n    // Make array of valid board indexes with isShot === false\r\n    const validCellsArr = gameboard.board.reduce((acc, curr, idx) => {\r\n      if (!curr.isShot) acc.push(idx)\r\n      return acc\r\n    }, [])\r\n    // Choose a random location from the valid indexes array\r\n    const randomLoc = generateRandomLocFromArray(validCellsArr)\r\n\r\n    return attack(randomLoc, gameboard)\r\n  }\r\n\r\n  return {\r\n    name,\r\n    attack,\r\n    makeRandomAttack,\r\n  }\r\n}\r\n\r\nexport default Player\r\n","export default class UI {\r\n  static loadGameBoards() {\r\n    const pBoard = document.querySelector('.board.friendly')\r\n    const eBoard = document.querySelector('.board.enemy')\r\n\r\n    UI.renderGridCells(pBoard)\r\n    UI.renderGridCells(eBoard)\r\n  }\r\n\r\n  // Gameboard\r\n  static renderGridCells(gridElement) {\r\n    const boardOverlay = gridElement.querySelector('.board-overlay')\r\n\r\n    for (let i = 0; i < 100; i += 1) {\r\n      const cell = document.createElement('div')\r\n      cell.classList.add('cell')\r\n\r\n      gridElement.insertBefore(cell, boardOverlay)\r\n    }\r\n  }\r\n\r\n  static renderShipCell(cellElement) {\r\n    cellElement.classList.add('ship')\r\n  }\r\n\r\n  static renderHit(cellElement) {\r\n    const img = document.createElement('img')\r\n    img.src = './images/hit.png'\r\n    img.height = 35\r\n    img.width = 35\r\n\r\n    cellElement.appendChild(img)\r\n    cellElement.classList.add('hit')\r\n  }\r\n\r\n  static renderMiss(cellElement) {\r\n    const dot = document.createElement('div')\r\n    dot.classList.add('dot')\r\n\r\n    cellElement.classList.add('miss')\r\n    cellElement.appendChild(dot)\r\n  }\r\n\r\n  static clearGameboardCells(cellsElementNodeList) {\r\n    cellsElementNodeList.forEach((cell) => {\r\n      cell.classList.remove('ship', 'ship-invalid', 'hit', 'miss')\r\n      cell.replaceChildren()\r\n    })\r\n  }\r\n\r\n  static clearAllGameboardCells() {\r\n    const pBoardCells = document.querySelectorAll('.board.friendly .cell')\r\n    const eBoardCells = document.querySelectorAll('.board.enemy .cell')\r\n\r\n    UI.clearGameboardCells(pBoardCells)\r\n    UI.clearGameboardCells(eBoardCells)\r\n  }\r\n\r\n  static renderPlayerGameboard(gameboard) {\r\n    const pBoardCells = document.querySelectorAll('.board.friendly .cell')\r\n\r\n    UI.clearGameboardCells(pBoardCells)\r\n\r\n    gameboard.board.forEach((obj, idx) => {\r\n      if (obj.hasShip && obj.isShot) {\r\n        UI.renderHit(pBoardCells[idx])\r\n      } else if (obj.hasShip && !obj.isShot) {\r\n        UI.renderShipCell(pBoardCells[idx])\r\n      } else if (!obj.hasShip && obj.isShot) {\r\n        UI.renderMiss(pBoardCells[idx])\r\n      }\r\n    })\r\n  }\r\n\r\n  static renderEnemyGameboard(gameboard) {\r\n    const eBoardCells = document.querySelectorAll('.board.enemy .cell')\r\n\r\n    UI.clearGameboardCells(eBoardCells)\r\n\r\n    gameboard.board.forEach((obj, idx) => {\r\n      if (obj.hasShip && obj.isShot) {\r\n        UI.renderHit(eBoardCells[idx])\r\n      } else if (!obj.hasShip && obj.isShot) {\r\n        UI.renderMiss(eBoardCells[idx])\r\n      }\r\n    })\r\n  }\r\n\r\n  static addDarkBoardOverlay(boardOwner) {\r\n    const pBoardOverlay = document.querySelector('.board.friendly .board-overlay')\r\n    const eBoardOverlay = document.querySelector('.board.enemy .board-overlay')\r\n\r\n    if (boardOwner === 'player') {\r\n      pBoardOverlay.classList.add('darken')\r\n    } else if (boardOwner === 'enemy') {\r\n      eBoardOverlay.classList.add('darken')\r\n    }\r\n  }\r\n\r\n  static removeDarkBoardOverlay(boardOwner) {\r\n    const pBoardOverlay = document.querySelector('.board.friendly .board-overlay')\r\n    const eBoardOverlay = document.querySelector('.board.enemy .board-overlay')\r\n\r\n    if (boardOwner === 'player') {\r\n      pBoardOverlay.classList.remove('darken')\r\n    } else if (boardOwner === 'enemy') {\r\n      eBoardOverlay.classList.remove('darken')\r\n    }\r\n  }\r\n\r\n  // Handle board Events\r\n  static boardEventHandler(e, boardElement, callbackFn, passAxis = false) {\r\n    const child = e.target\r\n    const idx = Array.prototype.indexOf.call(boardElement.children, child)\r\n\r\n    // Prevent clicks on border and dragging of other board cells from passing to the function\r\n    if (child.classList.contains('cell')) {\r\n      if (passAxis) {\r\n        const axis = document.querySelector('.rotate-btn').getAttribute('data-axis')\r\n        callbackFn(idx, axis)\r\n      } else {\r\n        callbackFn(idx)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Overlay\r\n  static renderOverlayGameboard(gameboard) {\r\n    const overlayBoardCells = document.querySelectorAll('.placement-container .board .cell')\r\n\r\n    gameboard.board.forEach((obj, idx) => {\r\n      if (obj.hasShip) UI.renderShipCell(overlayBoardCells[idx])\r\n    })\r\n  }\r\n\r\n  static showOverlay() {\r\n    const overlay = document.querySelector('.overlay')\r\n    overlay.classList.add('show')\r\n  }\r\n\r\n  static clearOverlay() {\r\n    const overlay = document.querySelector('.overlay')\r\n    overlay.replaceChildren()\r\n  }\r\n\r\n  static hideOverlay() {\r\n    const overlay = document.querySelector('.overlay')\r\n    overlay.classList.remove('show')\r\n    UI.clearOverlay()\r\n  }\r\n\r\n  static renderPlacementOverlay() {\r\n    const modalDiv = document.createElement('div')\r\n    modalDiv.classList.add('modal')\r\n\r\n    const mainHeader = document.createElement('h1')\r\n    mainHeader.textContent = 'Welcome to the battle'\r\n\r\n    const placementHeader = document.createElement('h2')\r\n    placementHeader.classList.add('placement-text')\r\n    placementHeader.textContent = 'Place Your Carrier'\r\n\r\n    const placementContainerDiv = document.createElement('div')\r\n    placementContainerDiv.classList.add('placement-container')\r\n\r\n    const rotateBtn = document.createElement('button')\r\n    rotateBtn.classList.add('rotate-btn')\r\n    rotateBtn.setAttribute('data-axis', 'x')\r\n\r\n    const rotateBtnText = document.createElement('span')\r\n    rotateBtnText.textContent = 'Rotate'\r\n\r\n    const rotateBtnImg = document.createElement('img')\r\n    rotateBtnImg.src = 'images/rotate.svg'\r\n    rotateBtnImg.width = 15\r\n    rotateBtnImg.height = 15\r\n\r\n    rotateBtn.append(rotateBtnText, rotateBtnImg)\r\n\r\n    const board = document.createElement('div')\r\n    board.classList.add('board')\r\n    UI.renderGridCells(board)\r\n\r\n    placementContainerDiv.append(rotateBtn, board)\r\n\r\n    const startBtn = document.createElement('button')\r\n    startBtn.classList.add('main-btn', 'start', 'disabled')\r\n    startBtn.textContent = 'Start Game'\r\n\r\n    modalDiv.append(mainHeader, placementHeader, placementContainerDiv, startBtn)\r\n\r\n    const overlay = document.querySelector('.overlay')\r\n    overlay.replaceChildren(modalDiv)\r\n\r\n    UI.showOverlay()\r\n  }\r\n\r\n  static renderPlacementOverlayText(string) {\r\n    const placementTextHeader = document.querySelector('.placement-text')\r\n    placementTextHeader.textContent = string\r\n  }\r\n\r\n  static renderEndGameOverlay(announceWinnerString) {\r\n    const modalDiv = document.createElement('div')\r\n    modalDiv.classList.add('modal')\r\n\r\n    const mainHeader = document.createElement('h1')\r\n    mainHeader.textContent = announceWinnerString\r\n\r\n    const restartBtn = document.createElement('button')\r\n    restartBtn.classList.add('main-btn', 'restart')\r\n    restartBtn.textContent = 'Restart Game'\r\n\r\n    modalDiv.append(mainHeader, restartBtn)\r\n\r\n    const overlay = document.querySelector('.overlay')\r\n    overlay.appendChild(modalDiv)\r\n\r\n    UI.showOverlay()\r\n  }\r\n\r\n  // Pregame\r\n  static renderShipOnHover(gameboard, shipLocationArray, isPlacementValid, isPlacementColliding) {\r\n    const overlayBoardCells = document.querySelectorAll('.placement-container .board .cell')\r\n\r\n    UI.clearGameboardCells(overlayBoardCells)\r\n\r\n    if (isPlacementValid) {\r\n      shipLocationArray.forEach((idx) => {\r\n        overlayBoardCells[idx].classList.add('ship')\r\n      })\r\n    } else if (isPlacementColliding) {\r\n      shipLocationArray.forEach((idx) => {\r\n        overlayBoardCells[idx].classList.add('ship-invalid')\r\n      })\r\n    }\r\n\r\n    UI.renderOverlayGameboard(gameboard)\r\n  }\r\n\r\n  static initPlacementBoardEventListeners(hoverFn, placementFn) {\r\n    const placementBoard = document.querySelector('.placement-container .board')\r\n\r\n    placementBoard.addEventListener('mouseover', (e) => UI.boardEventHandler(e, placementBoard, hoverFn, true))\r\n    placementBoard.addEventListener('click', (e) => UI.boardEventHandler(e, placementBoard, placementFn, true))\r\n  }\r\n\r\n  // Buttons\r\n  static rotateBtnEventHandler() {\r\n    const button = document.querySelector('.rotate-btn')\r\n\r\n    if (button.getAttribute('data-axis') === 'x') {\r\n      button.setAttribute('data-axis', 'y')\r\n    } else {\r\n      button.setAttribute('data-axis', 'x')\r\n    }\r\n  }\r\n\r\n  static initRotateBtnEventListener() {\r\n    const button = document.querySelector('.rotate-btn')\r\n\r\n    button.addEventListener('click', UI.rotateBtnEventHandler)\r\n  }\r\n\r\n  static initStartButtonEventListener(callbackFn) {\r\n    const button = document.querySelector('.start')\r\n\r\n    button.addEventListener('click', callbackFn)\r\n  }\r\n\r\n  static toggleStartButtonDisabled() {\r\n    const button = document.querySelector('.start')\r\n\r\n    if (button.classList.contains('disabled')) button.classList.remove('disabled')\r\n    else button.classList.add('disabled')\r\n  }\r\n\r\n  // Game Sequence\r\n  static initEnemyBoardEventListener(makeMoveFn) {\r\n    const eBoard = document.querySelector('.board.enemy')\r\n\r\n    eBoard.addEventListener('click', (e) => UI.boardEventHandler(e, eBoard, makeMoveFn))\r\n  }\r\n\r\n  // Game End\r\n  static initRestartGameEventListener(callbackFn) {\r\n    const button = document.querySelector('.restart')\r\n\r\n    button.addEventListener('click', callbackFn)\r\n  }\r\n}\r\n","import Ship from './ship'\r\nimport Gameboard from './gameboard'\r\nimport Player from './player'\r\nimport UI from './UI'\r\n\r\nexport default class Game {\r\n  // State\r\n  static player = Player('Friendly')\r\n\r\n  static enemy = Player('Enemy')\r\n\r\n  static playerBoard = Gameboard()\r\n\r\n  static enemyBoard = Gameboard()\r\n\r\n  static takesTurn = 'Player'\r\n\r\n  static placementBoard = Gameboard()\r\n\r\n  static ships = [\r\n    ['Carrier', Ship(5)],\r\n    ['Battleship', Ship(4)],\r\n    ['Destroyer', Ship(3)],\r\n    ['Submarine', Ship(3)],\r\n    ['Patrol Boat', Ship(2)],\r\n  ]\r\n\r\n  static currShip = Game.ships[0]\r\n\r\n  static isPlacementDone = false\r\n\r\n  // Game Sequence\r\n  static init() {\r\n    UI.loadGameBoards()\r\n    Game.pregameOverlay()\r\n    UI.initEnemyBoardEventListener(Game.makePlayerMove)\r\n  }\r\n\r\n  static restart() {\r\n    Game.resetState()\r\n    UI.clearAllGameboardCells()\r\n    Game.pregameOverlay()\r\n  }\r\n\r\n  static setupEnemyBoard() {\r\n    const eShip1 = Ship(5)\r\n    const eShip2 = Ship(4)\r\n    const eShip3 = Ship(3)\r\n    const eShip4 = Ship(3)\r\n    const eShip5 = Ship(2)\r\n\r\n    Game.enemyBoard.placeShipInRandomLocation(eShip1)\r\n    Game.enemyBoard.placeShipInRandomLocation(eShip2)\r\n    Game.enemyBoard.placeShipInRandomLocation(eShip3)\r\n    Game.enemyBoard.placeShipInRandomLocation(eShip4)\r\n    Game.enemyBoard.placeShipInRandomLocation(eShip5)\r\n  }\r\n\r\n  static hoverOnPlacementBoard(location, axis) {\r\n    if (!Game.isPlacementDone) {\r\n      const locationArray = Game.placementBoard.createLocationArray(\r\n        Game.currShip[1],\r\n        location,\r\n        axis,\r\n      )\r\n\r\n      const isValid = Game.placementBoard.isPlacementValid(\r\n        Game.currShip[1],\r\n        location,\r\n        axis,\r\n      )\r\n\r\n      const isColliding = Game.placementBoard.checkCollisions(locationArray)\r\n\r\n      UI.renderShipOnHover(Game.placementBoard, locationArray, isValid, isColliding)\r\n    }\r\n  }\r\n\r\n  static placeOnPlacementBoard(location, axis) {\r\n    const currShipIdx = Game.ships.indexOf(Game.currShip)\r\n    const nextShipIdx = currShipIdx + 1\r\n\r\n    if (currShipIdx > 4 || currShipIdx === -1) return\r\n\r\n    if (Game.placementBoard.isPlacementValid(Game.currShip[1], location, axis)) {\r\n      Game.placementBoard.placeShip(Game.currShip[1], location, axis)\r\n      Game.currShip = Game.ships[nextShipIdx]\r\n      UI.renderOverlayGameboard(Game.placementBoard)\r\n      if (currShipIdx < 4) UI.renderPlacementOverlayText(`Place Your ${Game.currShip[0]}`)\r\n      if (nextShipIdx > 4) {\r\n        Game.isPlacementDone = true\r\n        UI.renderPlacementOverlayText('Get Ready...')\r\n        UI.toggleStartButtonDisabled()\r\n        UI.initStartButtonEventListener(Game.start)\r\n      }\r\n    }\r\n  }\r\n\r\n  static pregameOverlay() {\r\n    UI.renderPlacementOverlay()\r\n    UI.initRotateBtnEventListener()\r\n    UI.initPlacementBoardEventListeners(Game.hoverOnPlacementBoard, Game.placeOnPlacementBoard)\r\n    UI.initStartButtonEventListener()\r\n  }\r\n\r\n  static start() {\r\n    Game.playerBoard.board = Object.assign(Game.playerBoard.board, Game.placementBoard.board)\r\n    Game.setupEnemyBoard()\r\n    UI.clearAllGameboardCells()\r\n    UI.hideOverlay()\r\n    UI.renderPlayerGameboard(Game.playerBoard)\r\n    UI.renderEnemyGameboard(Game.enemyBoard)\r\n    UI.addDarkBoardOverlay('player')\r\n  }\r\n\r\n  static resetState() {\r\n    Game.playerBoard = Gameboard()\r\n    Game.enemyBoard = Gameboard()\r\n    Game.placementBoard = Gameboard()\r\n\r\n    Game.takesTurn = 'Player'\r\n\r\n    Game.ships[0][1] = Ship(5)\r\n    Game.ships[1][1] = Ship(4)\r\n    Game.ships[2][1] = Ship(3)\r\n    Game.ships[3][1] = Ship(3)\r\n    Game.ships[4][1] = Ship(2)\r\n\r\n    // eslint-disable-next-line prefer-destructuring\r\n    Game.currShip = Game.ships[0]\r\n\r\n    Game.isPlacementDone = false\r\n  }\r\n\r\n  static end(announceWinnerString) {\r\n    UI.removeDarkBoardOverlay('player')\r\n    UI.removeDarkBoardOverlay('enemy')\r\n    UI.renderEndGameOverlay(announceWinnerString)\r\n    UI.initRestartGameEventListener(Game.restart)\r\n  }\r\n\r\n  // Move Loop\r\n  static makeEnemyMove() {\r\n    Game.enemy.makeRandomAttack(Game.playerBoard)\r\n    UI.renderPlayerGameboard(Game.playerBoard)\r\n    if (Game.playerBoard.isGameOver()) Game.end('Enemy Wins!')\r\n    else {\r\n      Game.takesTurn = 'Player'\r\n      UI.addDarkBoardOverlay('player')\r\n      UI.removeDarkBoardOverlay('enemy')\r\n    }\r\n  }\r\n\r\n  static async makePlayerMove(index) {\r\n    if (Game.takesTurn === 'Player' && !Game.enemyBoard.board[index].isShot) {\r\n      Game.player.attack(index, Game.enemyBoard)\r\n      UI.renderEnemyGameboard(Game.enemyBoard)\r\n\r\n      if (Game.enemyBoard.isGameOver()) Game.end('You Win!')\r\n      else {\r\n        Game.takesTurn = 'Enemy'\r\n        UI.addDarkBoardOverlay('enemy')\r\n        UI.removeDarkBoardOverlay('player')\r\n        await Game.sleepRandomTimeBetween(300, 600)\r\n        Game.makeEnemyMove()\r\n      }\r\n    }\r\n  }\r\n\r\n  // Utility\r\n  static sleepRandomTimeBetween(minMs, maxMs) {\r\n    const randomTimeMs = Math.floor(Math.random() * (maxMs - minMs + 1) + minMs)\r\n\r\n    return new Promise((resolve) => { setTimeout(resolve, randomTimeMs) })\r\n  }\r\n}\r\n","import Game from './modules/game'\r\n\r\ndocument.addEventListener('DOMContentLoaded', Game.init)\r\n"],"names":["length","Error","hitCount","hit","this","isSunk","board","Array","fill","map","hasShip","isShot","convertTo2DIndex","index1D","indexStr","toString","row","col","Number","createLocationArray","ship","location","axis","locationArray","i","push","getNeighborArray","shipLocationArray","surroundings","Set","neighborPattern","locationIndex2D","n","x","y","boardMaxIndexSize","boardSize","add","join","forEach","num","includes","delete","from","checkCollisions","some","loc","every","indexes","isPlacementValid","neighbors","shipNeighborArray","neighborIdx","placeShip","toUpperCase","checkIfShotHit","placeShipInRandomLocation","randomLoc","Math","floor","random","receiveAttack","isGameOver","shipSet","sunkShipsCounter","cell","size","name","attack","gameboard","makeRandomAttack","array","reduce","acc","curr","idx","UI","static","pBoard","document","querySelector","eBoard","renderGridCells","gridElement","boardOverlay","createElement","classList","insertBefore","cellElement","img","src","height","width","appendChild","dot","cellsElementNodeList","remove","replaceChildren","pBoardCells","querySelectorAll","eBoardCells","clearGameboardCells","obj","renderHit","renderShipCell","renderMiss","boardOwner","pBoardOverlay","eBoardOverlay","e","boardElement","callbackFn","passAxis","child","target","prototype","indexOf","call","children","contains","getAttribute","overlayBoardCells","clearOverlay","modalDiv","mainHeader","textContent","placementHeader","placementContainerDiv","rotateBtn","setAttribute","rotateBtnText","rotateBtnImg","append","startBtn","showOverlay","string","announceWinnerString","restartBtn","isPlacementColliding","renderOverlayGameboard","hoverFn","placementFn","placementBoard","addEventListener","boardEventHandler","button","rotateBtnEventHandler","makeMoveFn","Game","ships","loadGameBoards","pregameOverlay","initEnemyBoardEventListener","makePlayerMove","resetState","clearAllGameboardCells","eShip1","eShip2","eShip3","eShip4","eShip5","enemyBoard","isPlacementDone","currShip","isValid","isColliding","renderShipOnHover","currShipIdx","nextShipIdx","renderPlacementOverlayText","toggleStartButtonDisabled","initStartButtonEventListener","start","renderPlacementOverlay","initRotateBtnEventListener","initPlacementBoardEventListeners","hoverOnPlacementBoard","placeOnPlacementBoard","playerBoard","Object","assign","setupEnemyBoard","hideOverlay","renderPlayerGameboard","renderEnemyGameboard","addDarkBoardOverlay","takesTurn","removeDarkBoardOverlay","renderEndGameOverlay","initRestartGameEventListener","restart","enemy","end","index","player","sleepRandomTimeBetween","makeEnemyMove","minMs","maxMs","randomTimeMs","Promise","resolve","setTimeout","init"],"sourceRoot":""}