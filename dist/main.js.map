{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/./src/modules/ship.js","webpack://battleship/./src/modules/gameboard.js","webpack://battleship/./src/modules/player.js","webpack://battleship/./src/modules/UI.js","webpack://battleship/./src/modules/game.js","webpack://battleship/./src/index.js"],"sourcesContent":["const Ship = (length) => {\r\n  if (typeof length !== 'number') throw new Error('You must pass a number as the length argument to Ship()')\r\n  if (length < 2 || length > 6) throw new Error('Ship length must be between 2 to 6')\r\n\r\n  return {\r\n    length,\r\n    hitCount: 0,\r\n    hit() { this.hitCount += 1 },\r\n    isSunk() { return this.hitCount >= this.length },\r\n  }\r\n}\r\n\r\nexport default Ship\r\n","const Gameboard = () => {\r\n  // .map is used here to pass new instances of the object (.fill passes references)\r\n  const board = new Array(100).fill().map(() => ({ hasShip: false, isShot: false }))\r\n\r\n  const convertTo2DIndex = (index1D) => {\r\n    const indexStr = index1D.toString()\r\n    let row\r\n    let col\r\n\r\n    if (indexStr.length === 1) {\r\n      col = Number(indexStr[0])\r\n      row = 0\r\n    } else {\r\n      row = Number(indexStr[0])\r\n      col = Number(indexStr[1])\r\n    }\r\n    return [row, col]\r\n  }\r\n\r\n  const createLocationArray = (ship, location, axis) => {\r\n    const locationArray = []\r\n    for (let i = 0; i < ship.length; i += 1) {\r\n      if (axis === 'x') {\r\n        locationArray.push(location + i)\r\n      } else {\r\n        locationArray.push(location + i * 10)\r\n      }\r\n    }\r\n    return locationArray\r\n  }\r\n\r\n  const getNeighborArray = (shipLocationArray) => {\r\n    const surroundings = new Set()\r\n    const neighborPattern = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]\r\n    const boardSize = 10\r\n\r\n    // Add indexes of neighbor cells to the set\r\n    for (let i = 0; i < shipLocationArray.length; i += 1) {\r\n      const locationIndex2D = convertTo2DIndex(shipLocationArray[i])\r\n\r\n      for (let n = 0; n < neighborPattern.length; n += 1) {\r\n        const x = neighborPattern[n][0] + locationIndex2D[0]\r\n        const y = neighborPattern[n][1] + locationIndex2D[1]\r\n        const boardMaxIndexSize = boardSize - 1\r\n        if (x < 0 || x > boardMaxIndexSize || y < 0 || y > boardMaxIndexSize) {\r\n          // eslint-disable-next-line no-continue\r\n          continue\r\n        }\r\n        // Convert back to 1D array index and add to the set\r\n        surroundings.add(Number([x, y].join('')))\r\n      }\r\n    }\r\n\r\n    // Filter out the indexes of ship cells from the set\r\n    surroundings.forEach((num) => {\r\n      if (shipLocationArray.includes(num)) surroundings.delete(num)\r\n    })\r\n\r\n    return Array.from(surroundings)\r\n  }\r\n\r\n  const checkCollisions = (shipLocationArray) => {\r\n    const collisions = [9, 19, 29, 39, 49, 59, 69, 79, 89]\r\n    // Check if ship placement exceeds board boundries (y axis collisions)\r\n    if (shipLocationArray.some((loc) => !board[loc])) return false\r\n\r\n    // Check collisions with other ships\r\n    if (shipLocationArray.some((loc) => board[loc].hasShip)) return false\r\n\r\n    // Check collisions with the x axis\r\n    // eslint-disable-next-line max-len\r\n    if (collisions.some((n) => [n, n + 1].every((indexes) => shipLocationArray.includes(indexes)))) return false\r\n\r\n    // No collisions found\r\n    return true\r\n  }\r\n\r\n  const checkIfNeighborCellsAreEmpty = (shipNeighborArray) => {\r\n    if (shipNeighborArray.some((neighborIdx) => board[neighborIdx].hasShip)) return false\r\n    return true\r\n  }\r\n\r\n  const isPlacementValid = (ship, location, axis) => {\r\n    const locationArray = createLocationArray(ship, location, axis)\r\n    const neighbors = getNeighborArray(locationArray)\r\n\r\n    if (checkCollisions(locationArray) && checkIfNeighborCellsAreEmpty(neighbors)) return true\r\n    return false\r\n  }\r\n\r\n  const placeShip = (ship, location, axis = 'x') => {\r\n    const locationArray = createLocationArray(ship, location, axis)\r\n\r\n    if (!isPlacementValid(ship, location, axis)) {\r\n      throw new Error(`Placement of ship of length ${ship.length} at index ${location} on axis ${axis.toUpperCase()} is not valid.`)\r\n    }\r\n\r\n    locationArray.forEach((loc) => {\r\n      board[loc].hasShip = ship\r\n    })\r\n    return true\r\n  }\r\n\r\n  const placeShipInRandomLocation = (ship) => {\r\n    // Invalid location to start the loop\r\n    let randomLoc = 99\r\n    let axis = 'x'\r\n\r\n    while (!isPlacementValid(ship, randomLoc, axis)) {\r\n      randomLoc = Math.floor(Math.random() * 98)\r\n      axis = (Math.random() > 0.5) ? 'x' : 'y'\r\n    }\r\n\r\n    placeShip(ship, randomLoc, axis)\r\n  }\r\n\r\n  const checkIfShotHit = (location) => !!(board[location].hasShip)\r\n\r\n  const receiveAttack = (location) => {\r\n    if (checkIfShotHit(location)) board[location].hasShip.hit()\r\n    board[location].isShot = true\r\n  }\r\n\r\n  const isGameOver = () => {\r\n    const shipSet = new Set()\r\n    let sunkShipsCounter = 0\r\n\r\n    board.forEach((cell) => {\r\n      if (cell.hasShip) shipSet.add(cell.hasShip)\r\n    })\r\n\r\n    shipSet.forEach((ship) => {\r\n      if (ship.isSunk()) sunkShipsCounter += 1\r\n    })\r\n\r\n    return shipSet.size === sunkShipsCounter\r\n  }\r\n\r\n  return {\r\n    board,\r\n    createLocationArray,\r\n    getNeighborArray,\r\n    checkCollisions,\r\n    isPlacementValid,\r\n    placeShip,\r\n    placeShipInRandomLocation,\r\n    checkIfShotHit,\r\n    receiveAttack,\r\n    isGameOver,\r\n  }\r\n}\r\n\r\nexport default Gameboard\r\n","const Player = (name) => {\r\n  const generateRandomLocFromArray = (array) => array[Math.floor(Math.random() * array.length)]\r\n\r\n  const attack = (location, gameboard) => {\r\n    if (gameboard.board[location].isShot) return false\r\n    gameboard.receiveAttack(location)\r\n    return true\r\n  }\r\n\r\n  const makeRandomAttack = (gameboard) => {\r\n    // Make array of valid board indexes with isShot === false\r\n    const validCellsArr = gameboard.board.reduce((acc, curr, idx) => {\r\n      if (!curr.isShot) acc.push(idx)\r\n      return acc\r\n    }, [])\r\n    // Choose a random location from the valid indexes array\r\n    const randomLoc = generateRandomLocFromArray(validCellsArr)\r\n\r\n    return attack(randomLoc, gameboard)\r\n  }\r\n\r\n  return {\r\n    name,\r\n    attack,\r\n    makeRandomAttack,\r\n  }\r\n}\r\n\r\nexport default Player\r\n","export default class UI {\r\n  static loadGameUI() {\r\n    const pBoard = document.querySelector('.board.friendly')\r\n    const eBoard = document.querySelector('.board.enemy')\r\n\r\n    UI.renderGridCells(pBoard)\r\n    UI.renderGridCells(eBoard)\r\n  }\r\n\r\n  // Gameboard\r\n  static renderGridCells(gridElement) {\r\n    for (let i = 0; i < 100; i += 1) {\r\n      const cell = document.createElement('div')\r\n      cell.classList.add('cell')\r\n\r\n      gridElement.appendChild(cell)\r\n    }\r\n  }\r\n\r\n  static renderShipCell(cellElement) {\r\n    cellElement.classList.add('ship')\r\n  }\r\n\r\n  static renderHit(cellElement) {\r\n    const img = document.createElement('img')\r\n    img.src = './images/hit.png'\r\n    img.height = 35\r\n    img.width = 35\r\n\r\n    cellElement.appendChild(img)\r\n    cellElement.classList.add('hit')\r\n  }\r\n\r\n  static renderMiss(cellElement) {\r\n    const dot = document.createElement('div')\r\n    dot.classList.add('dot')\r\n\r\n    cellElement.classList.add('miss')\r\n    cellElement.appendChild(dot)\r\n  }\r\n\r\n  static clearGameboardCells(cellsElementNodeList) {\r\n    cellsElementNodeList.forEach((cell) => {\r\n      cell.classList.remove('ship', 'ship-invalid', 'hit', 'miss')\r\n      cell.replaceChildren()\r\n    })\r\n  }\r\n\r\n  static clearAllGameboardCells() {\r\n    const pBoardCells = document.querySelectorAll('.board.friendly .cell')\r\n    const eBoardCells = document.querySelectorAll('.board.enemy .cell')\r\n\r\n    UI.clearGameboardCells(pBoardCells)\r\n    UI.clearGameboardCells(eBoardCells)\r\n  }\r\n\r\n  static renderPlayerGameboard(gameboard) {\r\n    const pBoardCells = document.querySelectorAll('.board.friendly .cell')\r\n\r\n    UI.clearGameboardCells(pBoardCells)\r\n\r\n    gameboard.board.forEach((obj, idx) => {\r\n      if (obj.hasShip && obj.isShot) {\r\n        UI.renderHit(pBoardCells[idx])\r\n      } else if (obj.hasShip && !obj.isShot) {\r\n        UI.renderShipCell(pBoardCells[idx])\r\n      } else if (!obj.hasShip && obj.isShot) {\r\n        UI.renderMiss(pBoardCells[idx])\r\n      }\r\n    })\r\n  }\r\n\r\n  static renderEnemyGameboard(gameboard) {\r\n    const eBoardCells = document.querySelectorAll('.board.enemy .cell')\r\n\r\n    UI.clearGameboardCells(eBoardCells)\r\n\r\n    gameboard.board.forEach((obj, idx) => {\r\n      if (obj.hasShip && obj.isShot) {\r\n        UI.renderHit(eBoardCells[idx])\r\n      } else if (!obj.hasShip && obj.isShot) {\r\n        UI.renderMiss(eBoardCells[idx])\r\n      }\r\n    })\r\n  }\r\n\r\n  // Handle board Events\r\n  static boardEventHandler(e, boardElement, callbackFn, passAxis = false) {\r\n    const child = e.target\r\n    const idx = Array.prototype.indexOf.call(boardElement.children, child)\r\n\r\n    // Prevent clicks on border and dragging of other board cells from passing to the function\r\n    if (child.classList.contains('cell')) {\r\n      if (passAxis) {\r\n        const axis = document.querySelector('.rotate-btn').getAttribute('data-axis')\r\n        callbackFn(idx, axis)\r\n      } else {\r\n        callbackFn(idx)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Overlay\r\n  static renderOverlayGameboard(gameboard) {\r\n    const overlayBoardCells = document.querySelectorAll('.placement-container .board .cell')\r\n\r\n    gameboard.board.forEach((obj, idx) => {\r\n      if (obj.hasShip) UI.renderShipCell(overlayBoardCells[idx])\r\n    })\r\n  }\r\n\r\n  static showOverlay() {\r\n    const overlay = document.querySelector('.overlay')\r\n    overlay.classList.add('show')\r\n  }\r\n\r\n  static clearOverlay() {\r\n    const overlay = document.querySelector('.overlay')\r\n    overlay.replaceChildren()\r\n  }\r\n\r\n  static hideOverlay() {\r\n    const overlay = document.querySelector('.overlay')\r\n    overlay.classList.remove('show')\r\n    UI.clearOverlay()\r\n  }\r\n\r\n  static renderPlacementOverlay() {\r\n    const modalDiv = document.createElement('div')\r\n    modalDiv.classList.add('modal')\r\n\r\n    const mainHeader = document.createElement('h1')\r\n    mainHeader.textContent = 'Welcome to the battle'\r\n\r\n    const placementHeader = document.createElement('h2')\r\n    placementHeader.classList.add('placement-text')\r\n    placementHeader.textContent = 'Place Your Carrier'\r\n\r\n    const placementContainerDiv = document.createElement('div')\r\n    placementContainerDiv.classList.add('placement-container')\r\n\r\n    const rotateBtn = document.createElement('button')\r\n    rotateBtn.classList.add('rotate-btn')\r\n    rotateBtn.setAttribute('data-axis', 'x')\r\n\r\n    const rotateBtnText = document.createElement('span')\r\n    rotateBtnText.textContent = 'Rotate'\r\n\r\n    const rotateBtnImg = document.createElement('img')\r\n    rotateBtnImg.src = 'images/rotate.svg'\r\n    rotateBtnImg.width = 15\r\n    rotateBtnImg.height = 15\r\n\r\n    rotateBtn.append(rotateBtnText, rotateBtnImg)\r\n\r\n    const board = document.createElement('div')\r\n    board.classList.add('board')\r\n    UI.renderGridCells(board)\r\n\r\n    placementContainerDiv.append(rotateBtn, board)\r\n\r\n    const startBtn = document.createElement('button')\r\n    startBtn.classList.add('main-btn', 'start', 'disabled')\r\n    startBtn.textContent = 'Start Game'\r\n\r\n    modalDiv.append(mainHeader, placementHeader, placementContainerDiv, startBtn)\r\n\r\n    const overlay = document.querySelector('.overlay')\r\n    overlay.replaceChildren(modalDiv)\r\n\r\n    UI.showOverlay()\r\n  }\r\n\r\n  static renderPlacementOverlayText(string) {\r\n    const placementTextHeader = document.querySelector('.placement-text')\r\n    placementTextHeader.textContent = string\r\n  }\r\n\r\n  static renderEndGameOverlay(announceWinnerString) {\r\n    const modalDiv = document.createElement('div')\r\n    modalDiv.classList.add('modal')\r\n\r\n    const mainHeader = document.createElement('h1')\r\n    mainHeader.textContent = announceWinnerString\r\n\r\n    const restartBtn = document.createElement('button')\r\n    restartBtn.classList.add('main-btn', 'restart')\r\n    restartBtn.textContent = 'Restart Game'\r\n\r\n    modalDiv.append(mainHeader, restartBtn)\r\n\r\n    const overlay = document.querySelector('.overlay')\r\n    overlay.appendChild(modalDiv)\r\n\r\n    UI.showOverlay()\r\n  }\r\n\r\n  // Pregame\r\n  static renderShipOnHover(gameboard, shipLocationArray, isPlacementValid, isPlacementColliding) {\r\n    const overlayBoardCells = document.querySelectorAll('.placement-container .board .cell')\r\n\r\n    UI.clearGameboardCells(overlayBoardCells)\r\n\r\n    if (isPlacementValid) {\r\n      shipLocationArray.forEach((idx) => {\r\n        overlayBoardCells[idx].classList.add('ship')\r\n      })\r\n    } else if (isPlacementColliding) {\r\n      shipLocationArray.forEach((idx) => {\r\n        overlayBoardCells[idx].classList.add('ship-invalid')\r\n      })\r\n    }\r\n\r\n    UI.renderOverlayGameboard(gameboard)\r\n  }\r\n\r\n  static initPlacementBoardEventListeners(hoverFn, placementFn) {\r\n    const placementBoard = document.querySelector('.placement-container .board')\r\n\r\n    placementBoard.addEventListener('mouseover', (e) => UI.boardEventHandler(e, placementBoard, hoverFn, true))\r\n    placementBoard.addEventListener('click', (e) => UI.boardEventHandler(e, placementBoard, placementFn, true))\r\n  }\r\n\r\n  // Buttons\r\n  static rotateBtnEventHandler() {\r\n    const button = document.querySelector('.rotate-btn')\r\n\r\n    if (button.getAttribute('data-axis') === 'x') {\r\n      button.setAttribute('data-axis', 'y')\r\n    } else {\r\n      button.setAttribute('data-axis', 'x')\r\n    }\r\n  }\r\n\r\n  static initRotateBtnEventListener() {\r\n    const button = document.querySelector('.rotate-btn')\r\n\r\n    button.addEventListener('click', UI.rotateBtnEventHandler)\r\n  }\r\n\r\n  static initStartButtonEventListener(callbackFn) {\r\n    const button = document.querySelector('.start')\r\n\r\n    button.addEventListener('click', callbackFn)\r\n  }\r\n\r\n  static toggleStartButtonDisabled() {\r\n    const button = document.querySelector('.start')\r\n\r\n    if (button.classList.contains('disabled')) button.classList.remove('disabled')\r\n    else button.classList.add('disabled')\r\n  }\r\n\r\n  // Game Sequence\r\n  static initEnemyBoardEventListener(makeMoveFn) {\r\n    const eBoard = document.querySelector('.board.enemy')\r\n\r\n    eBoard.addEventListener('click', (e) => UI.boardEventHandler(e, eBoard, makeMoveFn))\r\n  }\r\n\r\n  // Game End\r\n  static initRestartGameEventListener(callbackFn) {\r\n    const button = document.querySelector('.restart')\r\n\r\n    button.addEventListener('click', callbackFn)\r\n  }\r\n}\r\n","import Ship from './ship'\r\nimport Gameboard from './gameboard'\r\nimport Player from './player'\r\nimport UI from './UI'\r\n\r\nexport default class Game {\r\n  // State\r\n  static player = Player('Friendly')\r\n\r\n  static enemy = Player('Enemy')\r\n\r\n  static playerBoard = Gameboard()\r\n\r\n  static enemyBoard = Gameboard()\r\n\r\n  static takesTurn = 'Player'\r\n\r\n  static placementBoard = Gameboard()\r\n\r\n  static ships = [\r\n    ['Carrier', Ship(5)],\r\n    ['Battleship', Ship(4)],\r\n    ['Destroyer', Ship(3)],\r\n    ['Submarine', Ship(3)],\r\n    ['Patrol Boat', Ship(2)],\r\n  ]\r\n\r\n  static currShip = Game.ships[0]\r\n\r\n  static isPlacementDone = false\r\n\r\n  // Game Sequence\r\n\r\n  static init() {\r\n    UI.loadGameUI()\r\n    Game.preGameOverlay()\r\n    UI.initEnemyBoardEventListener(Game.makePlayerMove)\r\n  }\r\n\r\n  static restart() {\r\n    Game.resetGameState()\r\n    UI.clearAllGameboardCells()\r\n    Game.preGameOverlay()\r\n  }\r\n\r\n  static setupEnemyBoard() {\r\n    const eShip1 = Ship(5)\r\n    const eShip2 = Ship(4)\r\n    const eShip3 = Ship(3)\r\n    const eShip4 = Ship(3)\r\n    const eShip5 = Ship(2)\r\n\r\n    Game.enemyBoard.placeShipInRandomLocation(eShip1)\r\n    Game.enemyBoard.placeShipInRandomLocation(eShip2)\r\n    Game.enemyBoard.placeShipInRandomLocation(eShip3)\r\n    Game.enemyBoard.placeShipInRandomLocation(eShip4)\r\n    Game.enemyBoard.placeShipInRandomLocation(eShip5)\r\n  }\r\n\r\n  static hoverOnPlacementBoard(location, axis) {\r\n    if (!Game.isPlacementDone) {\r\n      const locationArray = Game.placementBoard.createLocationArray(\r\n        Game.currShip[1],\r\n        location,\r\n        axis,\r\n      )\r\n\r\n      const isValid = Game.placementBoard.isPlacementValid(\r\n        Game.currShip[1],\r\n        location,\r\n        axis,\r\n      )\r\n\r\n      const isColliding = Game.placementBoard.checkCollisions(locationArray)\r\n\r\n      UI.renderShipOnHover(Game.placementBoard, locationArray, isValid, isColliding)\r\n    }\r\n  }\r\n\r\n  static placeOnPlacementBoard(location, axis) {\r\n    const currShipIdx = Game.ships.indexOf(Game.currShip)\r\n    const nextShipIdx = currShipIdx + 1\r\n\r\n    if (currShipIdx > 4 || currShipIdx === -1) return\r\n\r\n    if (Game.placementBoard.isPlacementValid(Game.currShip[1], location, axis)) {\r\n      Game.placementBoard.placeShip(Game.currShip[1], location, axis)\r\n      Game.currShip = Game.ships[nextShipIdx]\r\n      UI.renderOverlayGameboard(Game.placementBoard)\r\n      if (currShipIdx < 4) UI.renderPlacementOverlayText(`Place Your ${Game.currShip[0]}`)\r\n      if (nextShipIdx > 4) {\r\n        Game.isPlacementDone = true\r\n        UI.renderPlacementOverlayText('Get Ready...')\r\n        UI.toggleStartButtonDisabled()\r\n        UI.initStartButtonEventListener(Game.start)\r\n      }\r\n    }\r\n  }\r\n\r\n  static preGameOverlay() {\r\n    UI.renderPlacementOverlay()\r\n    UI.initRotateBtnEventListener()\r\n    UI.initPlacementBoardEventListeners(Game.hoverOnPlacementBoard, Game.placeOnPlacementBoard)\r\n    UI.initStartButtonEventListener()\r\n  }\r\n\r\n  static start() {\r\n    Game.playerBoard.board = Object.assign(Game.playerBoard.board, Game.placementBoard.board)\r\n    Game.setupEnemyBoard()\r\n    UI.clearAllGameboardCells()\r\n    UI.hideOverlay()\r\n    UI.renderPlayerGameboard(Game.playerBoard)\r\n    UI.renderEnemyGameboard(Game.enemyBoard)\r\n  }\r\n\r\n  static resetGameState() {\r\n    Game.playerBoard = Gameboard()\r\n    Game.enemyBoard = Gameboard()\r\n    Game.placementBoard = Gameboard()\r\n\r\n    Game.takesTurn = 'Player'\r\n\r\n    Game.ships[0][1] = Ship(5)\r\n    Game.ships[1][1] = Ship(4)\r\n    Game.ships[2][1] = Ship(3)\r\n    Game.ships[3][1] = Ship(3)\r\n    Game.ships[4][1] = Ship(2)\r\n\r\n    // eslint-disable-next-line prefer-destructuring\r\n    Game.currShip = Game.ships[0]\r\n\r\n    Game.isPlacementDone = false\r\n  }\r\n\r\n  static end(announceWinnerString) {\r\n    UI.renderEndGameOverlay(announceWinnerString)\r\n    UI.initRestartGameEventListener(Game.restart)\r\n  }\r\n\r\n  // Move Loop\r\n  static makeEnemyMove() {\r\n    Game.enemy.makeRandomAttack(Game.playerBoard)\r\n    UI.renderPlayerGameboard(Game.playerBoard)\r\n    if (Game.playerBoard.isGameOver()) Game.end('Enemy Wins!')\r\n    else Game.takesTurn = 'Player'\r\n  }\r\n\r\n  static async makePlayerMove(index) {\r\n    if (Game.takesTurn === 'Player' && !Game.enemyBoard.board[index].isShot) {\r\n      Game.player.attack(index, Game.enemyBoard)\r\n      UI.renderEnemyGameboard(Game.enemyBoard)\r\n\r\n      if (Game.enemyBoard.isGameOver()) Game.end('You Win!')\r\n      else {\r\n        Game.takesTurn = 'Enemy'\r\n        await Game.sleepRandomTimeBetween(300, 600)\r\n        Game.makeEnemyMove()\r\n      }\r\n    }\r\n  }\r\n\r\n  // Utility\r\n  static sleepRandomTimeBetween(minMs, maxMs) {\r\n    const randomTimeMs = Math.floor(Math.random() * (maxMs - minMs + 1) + minMs)\r\n\r\n    return new Promise((resolve) => { setTimeout(resolve, randomTimeMs) })\r\n  }\r\n}\r\n","import Game from './modules/game'\r\n\r\ndocument.addEventListener('DOMContentLoaded', Game.init)\r\n"],"names":["length","Error","hitCount","hit","this","isSunk","board","Array","fill","map","hasShip","isShot","convertTo2DIndex","index1D","indexStr","toString","row","col","Number","createLocationArray","ship","location","axis","locationArray","i","push","getNeighborArray","shipLocationArray","surroundings","Set","neighborPattern","locationIndex2D","n","x","y","boardMaxIndexSize","boardSize","add","join","forEach","num","includes","delete","from","checkCollisions","some","loc","every","indexes","isPlacementValid","neighbors","shipNeighborArray","neighborIdx","placeShip","toUpperCase","checkIfShotHit","placeShipInRandomLocation","randomLoc","Math","floor","random","receiveAttack","isGameOver","shipSet","sunkShipsCounter","cell","size","name","attack","gameboard","makeRandomAttack","array","reduce","acc","curr","idx","UI","static","pBoard","document","querySelector","eBoard","renderGridCells","gridElement","createElement","classList","appendChild","cellElement","img","src","height","width","dot","cellsElementNodeList","remove","replaceChildren","pBoardCells","querySelectorAll","eBoardCells","clearGameboardCells","obj","renderHit","renderShipCell","renderMiss","e","boardElement","callbackFn","passAxis","child","target","prototype","indexOf","call","children","contains","getAttribute","overlayBoardCells","clearOverlay","modalDiv","mainHeader","textContent","placementHeader","placementContainerDiv","rotateBtn","setAttribute","rotateBtnText","rotateBtnImg","append","startBtn","showOverlay","string","announceWinnerString","restartBtn","isPlacementColliding","renderOverlayGameboard","hoverFn","placementFn","placementBoard","addEventListener","boardEventHandler","button","rotateBtnEventHandler","makeMoveFn","Game","ships","loadGameUI","preGameOverlay","initEnemyBoardEventListener","makePlayerMove","resetGameState","clearAllGameboardCells","eShip1","eShip2","eShip3","eShip4","eShip5","enemyBoard","isPlacementDone","currShip","isValid","isColliding","renderShipOnHover","currShipIdx","nextShipIdx","renderPlacementOverlayText","toggleStartButtonDisabled","initStartButtonEventListener","start","renderPlacementOverlay","initRotateBtnEventListener","initPlacementBoardEventListeners","hoverOnPlacementBoard","placeOnPlacementBoard","playerBoard","Object","assign","setupEnemyBoard","hideOverlay","renderPlayerGameboard","renderEnemyGameboard","takesTurn","renderEndGameOverlay","initRestartGameEventListener","restart","enemy","end","index","player","sleepRandomTimeBetween","makeEnemyMove","minMs","maxMs","randomTimeMs","Promise","resolve","setTimeout","init"],"sourceRoot":""}