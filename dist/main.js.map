{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/./src/modules/ship.js","webpack://battleship/./src/modules/gameboard.js","webpack://battleship/./src/modules/player.js","webpack://battleship/./src/modules/UI.js","webpack://battleship/./src/modules/game.js","webpack://battleship/./src/index.js"],"sourcesContent":["const Ship = (length) => {\r\n  if (typeof length !== 'number') throw new Error('You must pass a number as the length argument to Ship()')\r\n  if (length < 2 || length > 6) throw new Error('Ship length must be between 2 to 6')\r\n\r\n  return {\r\n    length,\r\n    hitCount: 0,\r\n    hit() { this.hitCount += 1 },\r\n    isSunk() { return this.hitCount >= this.length },\r\n  }\r\n}\r\n\r\nexport default Ship\r\n","const Gameboard = () => {\r\n  // .map is used here to pass new instances of the object (.fill passes references)\r\n  const board = new Array(100).fill().map(() => ({ hasShip: false, isShot: false }))\r\n\r\n  const convertTo2DIndex = (index1D) => {\r\n    const indexStr = index1D.toString()\r\n    let row\r\n    let col\r\n\r\n    if (indexStr.length === 1) {\r\n      col = Number(indexStr[0])\r\n      row = 0\r\n    } else {\r\n      row = Number(indexStr[0])\r\n      col = Number(indexStr[1])\r\n    }\r\n    return [row, col]\r\n  }\r\n\r\n  const createLocationArray = (ship, location, axis) => {\r\n    const locationArray = []\r\n    for (let i = 0; i < ship.length; i += 1) {\r\n      if (axis === 'x') {\r\n        locationArray.push(location + i)\r\n      } else {\r\n        locationArray.push(location + i * 10)\r\n      }\r\n    }\r\n    return locationArray\r\n  }\r\n\r\n  const getNeighborArray = (shipLocationArray) => {\r\n    const surroundings = new Set()\r\n    const neighborPattern = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]\r\n    const boardSize = 10\r\n\r\n    // Add indexes of neighbor cells to the set\r\n    for (let i = 0; i < shipLocationArray.length; i += 1) {\r\n      const locationIndex2D = convertTo2DIndex(shipLocationArray[i])\r\n\r\n      for (let n = 0; n < neighborPattern.length; n += 1) {\r\n        const x = neighborPattern[n][0] + locationIndex2D[0]\r\n        const y = neighborPattern[n][1] + locationIndex2D[1]\r\n        const boardMaxIndexSize = boardSize - 1\r\n        if (x < 0 || x > boardMaxIndexSize || y < 0 || y > boardMaxIndexSize) {\r\n          // eslint-disable-next-line no-continue\r\n          continue\r\n        }\r\n        // Convert back to 1D array index and add to the set\r\n        surroundings.add(Number([x, y].join('')))\r\n      }\r\n    }\r\n\r\n    // Filter out the indexes of ship cells from the set\r\n    surroundings.forEach((num) => {\r\n      if (shipLocationArray.includes(num)) surroundings.delete(num)\r\n    })\r\n\r\n    return Array.from(surroundings)\r\n  }\r\n\r\n  const checkCollisions = (shipLocationArray) => {\r\n    const collisions = [9, 19, 29, 39, 49, 59, 69, 79, 89]\r\n    // Check if ship placement exceeds board boundries (y axis collisions)\r\n    if (shipLocationArray.some((loc) => !board[loc])) return false\r\n\r\n    // Check collisions with other ships\r\n    if (shipLocationArray.some((loc) => board[loc].hasShip)) return false\r\n\r\n    // Check collisions with the x axis\r\n    // eslint-disable-next-line max-len\r\n    if (collisions.some((n) => [n, n + 1].every((indexes) => shipLocationArray.includes(indexes)))) return false\r\n\r\n    // No collisions found\r\n    return true\r\n  }\r\n\r\n  const checkIfNeighborCellsAreEmpty = (shipNeighborArray) => {\r\n    if (shipNeighborArray.some((neighborIdx) => board[neighborIdx].hasShip)) return false\r\n    return true\r\n  }\r\n\r\n  const isPlacementValid = (ship, location, axis) => {\r\n    const locationArray = createLocationArray(ship, location, axis)\r\n    const neighbors = getNeighborArray(locationArray)\r\n\r\n    if (checkCollisions(locationArray) && checkIfNeighborCellsAreEmpty(neighbors)) return true\r\n    return false\r\n  }\r\n\r\n  const placeShip = (ship, location, axis = 'x') => {\r\n    const locationArray = createLocationArray(ship, location, axis)\r\n\r\n    if (!isPlacementValid(ship, location, axis)) {\r\n      throw new Error(`Placement of ship of length ${ship.length} at index ${location} on axis ${axis.toUpperCase()} is not valid.`)\r\n    }\r\n\r\n    locationArray.forEach((loc) => {\r\n      board[loc].hasShip = ship\r\n    })\r\n    return true\r\n  }\r\n\r\n  const checkIfShotHit = (location) => !!(board[location].hasShip)\r\n\r\n  const receiveAttack = (location) => {\r\n    if (checkIfShotHit(location)) board[location].hasShip.hit()\r\n    board[location].isShot = true\r\n  }\r\n\r\n  const isGameOver = () => {\r\n    const shipSet = new Set()\r\n    let sunkShipsCounter = 0\r\n\r\n    board.forEach((cell) => {\r\n      if (cell.hasShip) shipSet.add(cell.hasShip)\r\n    })\r\n\r\n    shipSet.forEach((ship) => {\r\n      if (ship.isSunk()) sunkShipsCounter += 1\r\n    })\r\n\r\n    return shipSet.size === sunkShipsCounter\r\n  }\r\n\r\n  return {\r\n    board,\r\n    createLocationArray,\r\n    getNeighborArray,\r\n    checkCollisions,\r\n    isPlacementValid,\r\n    placeShip,\r\n    checkIfShotHit,\r\n    receiveAttack,\r\n    isGameOver,\r\n  }\r\n}\r\n\r\nexport default Gameboard\r\n","const Player = (name) => {\r\n  const generateRandomLocFromArray = (array) => array[Math.floor(Math.random() * array.length)]\r\n\r\n  const attack = (location, gameboard) => {\r\n    if (gameboard.board[location].isShot) return false\r\n    gameboard.receiveAttack(location)\r\n    return true\r\n  }\r\n\r\n  const makeRandomAttack = (gameboard) => {\r\n    // Make array of valid board indexes with isShot === false\r\n    const validCellsArr = gameboard.board.reduce((acc, curr, idx) => {\r\n      if (!curr.isShot) acc.push(idx)\r\n      return acc\r\n    }, [])\r\n    // Choose a random location from the valid indexes array\r\n    const randomLoc = generateRandomLocFromArray(validCellsArr)\r\n\r\n    return attack(randomLoc, gameboard)\r\n  }\r\n\r\n  return {\r\n    name,\r\n    attack,\r\n    makeRandomAttack,\r\n  }\r\n}\r\n\r\nexport default Player\r\n","/* eslint-disable no-unused-vars */\r\nexport default class UI {\r\n  static loadGameUI() {\r\n    const pBoard = document.querySelector('.board.friendly')\r\n    const eBoard = document.querySelector('.board.enemy')\r\n\r\n    UI.renderGridCells(pBoard)\r\n    UI.renderGridCells(eBoard)\r\n  }\r\n\r\n  // Gameboard\r\n  static renderGridCells(gridElement) {\r\n    for (let i = 0; i < 100; i += 1) {\r\n      const cell = document.createElement('div')\r\n      cell.classList.add('cell')\r\n\r\n      gridElement.appendChild(cell)\r\n    }\r\n  }\r\n\r\n  static renderShipCell(cellElement) {\r\n    cellElement.classList.add('ship')\r\n  }\r\n\r\n  static renderHit(cellElement) {\r\n    const img = document.createElement('img')\r\n    img.src = '/images/hit.png'\r\n    img.height = 35\r\n    img.width = 35\r\n\r\n    cellElement.appendChild(img)\r\n    cellElement.classList.add('hit')\r\n  }\r\n\r\n  static renderMiss(cellElement) {\r\n    const dot = document.createElement('div')\r\n    dot.classList.add('dot')\r\n\r\n    cellElement.classList.add('miss')\r\n    cellElement.appendChild(dot)\r\n  }\r\n\r\n  static clearGameboardCells(cellsElementNodeList) {\r\n    cellsElementNodeList.forEach((cell) => {\r\n      cell.classList.remove('ship', 'hit', 'miss')\r\n      cell.replaceChildren()\r\n    })\r\n  }\r\n\r\n  static clearAllGameboardCells() {\r\n    const pBoardCells = document.querySelectorAll('.board.friendly .cell')\r\n    const eBoardCells = document.querySelectorAll('.board.enemy .cell')\r\n\r\n    UI.clearGameboardCells(pBoardCells)\r\n    UI.clearGameboardCells(eBoardCells)\r\n  }\r\n\r\n  static renderPlayerGameboard(gameboard) {\r\n    const pBoardCells = document.querySelectorAll('.board.friendly .cell')\r\n\r\n    UI.clearGameboardCells(pBoardCells)\r\n\r\n    gameboard.board.forEach((obj, idx) => {\r\n      if (obj.hasShip && obj.isShot) {\r\n        UI.renderHit(pBoardCells[idx])\r\n      } else if (obj.hasShip && !obj.isShot) {\r\n        UI.renderShipCell(pBoardCells[idx])\r\n      } else if (!obj.hasShip && obj.isShot) {\r\n        UI.renderMiss(pBoardCells[idx])\r\n      }\r\n    })\r\n  }\r\n\r\n  static renderEnemyGameboard(gameboard) {\r\n    const eBoardCells = document.querySelectorAll('.board.enemy .cell')\r\n\r\n    UI.clearGameboardCells(eBoardCells)\r\n\r\n    gameboard.board.forEach((obj, idx) => {\r\n      if (obj.hasShip && obj.isShot) {\r\n        UI.renderHit(eBoardCells[idx])\r\n      } else if (!obj.hasShip && obj.isShot) {\r\n        UI.renderMiss(eBoardCells[idx])\r\n      }\r\n    })\r\n  }\r\n\r\n  // Overlay\r\n  static showOverlay() {\r\n    const overlay = document.querySelector('.overlay')\r\n    overlay.classList.add('show')\r\n  }\r\n\r\n  static clearOverlay() {\r\n    const overlay = document.querySelector('.overlay')\r\n    overlay.replaceChildren()\r\n  }\r\n\r\n  static hideOverlay() {\r\n    const overlay = document.querySelector('.overlay')\r\n    overlay.classList.remove('show')\r\n    UI.clearOverlay()\r\n  }\r\n\r\n  static renderPlacementOverlay() {\r\n    const modalDiv = document.createElement('div')\r\n    modalDiv.classList.add('modal')\r\n\r\n    const mainHeader = document.createElement('h1')\r\n    mainHeader.textContent = 'Welcome to the battle'\r\n\r\n    const placementHeader = document.createElement('h2')\r\n    placementHeader.classList.add('placement-text')\r\n\r\n    const placementSpan = document.createElement('span')\r\n    placementSpan.textContent = 'Place Your '\r\n\r\n    const typeSpan = document.createElement('span')\r\n    typeSpan.classList.add('type')\r\n    typeSpan.textContent = 'Carrier'\r\n\r\n    placementHeader.append(placementSpan, typeSpan)\r\n\r\n    const placementContainerDiv = document.createElement('div')\r\n    placementContainerDiv.classList.add('placement-container')\r\n\r\n    const rotateBtn = document.createElement('button')\r\n    rotateBtn.classList.add('rotate-btn')\r\n    rotateBtn.setAttribute('data-axis', 'x')\r\n\r\n    const rotateBtnText = document.createElement('span')\r\n    rotateBtnText.textContent = 'Rotate'\r\n\r\n    const rotateBtnImg = document.createElement('img')\r\n    rotateBtnImg.src = 'images/rotate.svg'\r\n    rotateBtnImg.width = 15\r\n    rotateBtnImg.height = 15\r\n\r\n    rotateBtn.append(rotateBtnText, rotateBtnImg)\r\n\r\n    const board = document.createElement('div')\r\n    board.classList.add('board')\r\n    UI.renderGridCells(board)\r\n\r\n    placementContainerDiv.append(rotateBtn, board)\r\n\r\n    const startBtn = document.createElement('button')\r\n    startBtn.classList.add('main-btn', 'start')\r\n    startBtn.textContent = 'Start Game'\r\n\r\n    modalDiv.append(mainHeader, placementHeader, placementContainerDiv, startBtn)\r\n\r\n    const overlay = document.querySelector('.overlay')\r\n    overlay.appendChild(modalDiv)\r\n\r\n    UI.showOverlay()\r\n  }\r\n\r\n  // Pregame\r\n  static placementBoardHoverHandler(e, boardElement, callbackFn) {\r\n    const axis = document.querySelector('.rotate.btn').getAttribute('data-axis')\r\n    const child = e.target\r\n    const idx = Array.prototype.indexOf.call(boardElement.children, child)\r\n\r\n    if (child.classList.contains('cell')) callbackFn(idx, axis)\r\n  }\r\n\r\n  static placementBoardClickHandler = (e, boardElement, callbackFn) => {\r\n    const axis = document.querySelector('.rotate-btn').getAttribute('data-axis')\r\n    const child = e.target\r\n    const idx = Array.prototype.indexOf.call(boardElement.children, child)\r\n\r\n    if (child.classList.contains('cell')) {\r\n      console.log('click')\r\n      // callbackFn(idx, axis)\r\n    }\r\n  }\r\n\r\n  static initPlacementBoardEventListeners(placementValidationCheckFn, placementFn, shipsArr) {\r\n    const placementBoard = document.querySelector('.placement-container .board')\r\n\r\n    placementBoard.addEventListener('hover', (e) => UI.placementBoardHoverHandler(e, placementBoard, placementValidationCheckFn))\r\n    placementBoard.addEventListener('click', (e) => UI.placementBoardClickHandler(e, placementBoard, placementFn))\r\n  }\r\n\r\n  // Rotate Btn\r\n  static rotateBtnEventHandler() {\r\n    const button = document.querySelector('.rotate-btn')\r\n\r\n    if (button.getAttribute('data-axis') === 'x') {\r\n      button.setAttribute('data-axis', 'y')\r\n    } else {\r\n      button.setAttribute('data-axis', 'x')\r\n    }\r\n  }\r\n\r\n  static initRotateBtnEventListener() {\r\n    const button = document.querySelector('.rotate-btn')\r\n\r\n    button.addEventListener('click', UI.rotateBtnEventHandler)\r\n  }\r\n\r\n  // Game Sequence\r\n  static boardEventHandler(e, boardElement, callbackFn) {\r\n    const child = e.target\r\n    const idx = Array.prototype.indexOf.call(boardElement.children, child)\r\n\r\n    // Prevent clicks on border and dragging of other board cells from passing to the function\r\n    if (child.classList.contains('cell')) callbackFn(idx)\r\n  }\r\n\r\n  static initEnemyBoardEventListener(makeMoveFn) {\r\n    const eBoard = document.querySelector('.board.enemy')\r\n\r\n    eBoard.addEventListener('click', (e) => UI.boardEventHandler(e, eBoard, makeMoveFn))\r\n  }\r\n\r\n  // Game End\r\n  static renderEndGame() {\r\n    // TODO: Let player reset, change positions of ships etc,\r\n    // render clear boards.\r\n  }\r\n}\r\n\r\n/* TODO:\r\nOption 1:\r\n  Write a function that uses a const gameboard = Gameboard() to use its placement checking logic,\r\n  for each hover it checks if the placement is valid on the board,\r\n  the function saves the first index and orientation for each placed ship\r\n  and returns an object:\r\n  {\r\n    carrier: [3, 'x'],\r\n    destroyer: [12, 'y'],\r\n    etc..\r\n  }\r\nOption 2:\r\n  Find an easier way placing ships directly in the board\r\n*/\r\n","/* eslint-disable no-unused-vars */\r\nimport Ship from './ship'\r\nimport Gameboard from './gameboard'\r\nimport Player from './player'\r\nimport UI from './UI'\r\n\r\nexport default class Game {\r\n  // static state = {\r\n  //   player: Player('Friendly'),\r\n  //   enemy: Player('Enemy'),\r\n  //   playerBoard: Gameboard(),\r\n  //   enemyBoard: Gameboard(),\r\n  //   takesTurn: 'Player',\r\n  // }\r\n\r\n  static player = Player('Friendly')\r\n\r\n  static enemy = Player('Enemy')\r\n\r\n  static playerBoard = Gameboard()\r\n\r\n  static enemyBoard = Gameboard()\r\n\r\n  static takesTurn = 'Player'\r\n\r\n  static initGame() {\r\n    UI.loadGameUI()\r\n\r\n    // Game.setShipLocations()\r\n    // UI.initPlacementBoardEventListeners()\r\n    Game.preGameShipPlacement()\r\n    UI.initEnemyBoardEventListener(Game.makePlayerMove)\r\n  }\r\n\r\n  static setShipLocations() {\r\n    const pShip1 = Ship(5)\r\n    const pShip2 = Ship(4)\r\n    const pShip3 = Ship(3)\r\n    const pShip4 = Ship(3)\r\n    const pShip5 = Ship(2)\r\n\r\n    const eShip1 = Ship(5)\r\n    const eShip2 = Ship(4)\r\n    const eShip3 = Ship(3)\r\n    const eShip4 = Ship(3)\r\n    const eShip5 = Ship(2)\r\n\r\n    Game.playerBoard.placeShip(pShip1, 2)\r\n    Game.playerBoard.placeShip(pShip2, 34)\r\n    Game.playerBoard.placeShip(pShip3, 20, 'y')\r\n    Game.playerBoard.placeShip(pShip4, 75)\r\n    Game.playerBoard.placeShip(pShip5, 82, 'y')\r\n\r\n    Game.enemyBoard.placeShip(eShip1, 5)\r\n    Game.enemyBoard.placeShip(eShip2, 43)\r\n    Game.enemyBoard.placeShip(eShip3, 70, 'y')\r\n    Game.enemyBoard.placeShip(eShip4, 77)\r\n    Game.enemyBoard.placeShip(eShip5, 28, 'y')\r\n    // enemyBoard.placeShip(eShip5, 19) // Throws error\r\n\r\n    UI.renderPlayerGameboard(Game.playerBoard)\r\n    UI.renderEnemyGameboard(Game.enemyBoard)\r\n  }\r\n\r\n  static preGameShipPlacement() {\r\n    const placementBoard = Gameboard()\r\n    const ships = [\r\n      Ship(5), // Carrier\r\n      Ship(4), // Battleship\r\n      Ship(3), // Destroyer\r\n      Ship(3), // Submarine\r\n      Ship(2), // Patrol Boat\r\n    ]\r\n    const currShip = ships[0]\r\n\r\n    UI.renderPlacementOverlay()\r\n    UI.initRotateBtnEventListener()\r\n    UI.initPlacementBoardEventListeners(\r\n      placementBoard.isPlacementValid,\r\n      placementBoard.placeShip,\r\n      ships,\r\n    )\r\n    // const pShip1 = Ship(5) // Carrier\r\n    // const pShip2 = Ship(4) // Battleship\r\n    // const pShip3 = Ship(3) // Destroyer\r\n    // const pShip4 = Ship(3) // Submarine\r\n    // const pShip5 = Ship(2) // Patrol Boat\r\n  }\r\n\r\n  static resetGameState() {\r\n    Game.player = Player('Friendly')\r\n    Game.enemy = Player('Enemy')\r\n    Game.playerBoard = Gameboard()\r\n    Game.enemyBoard = Gameboard()\r\n    Game.takesTurn = 'Player'\r\n    // TODO: Remove setShipLocations() and on play again set them\r\n    Game.setShipLocations()\r\n  }\r\n\r\n  static endGame() {\r\n    UI.renderEndGame()\r\n    UI.clearAllGameboardCells()\r\n    Game.resetGameState()\r\n  }\r\n\r\n  // Game Loop\r\n  static makeEnemyMove() {\r\n    Game.enemy.makeRandomAttack(Game.playerBoard)\r\n    UI.renderPlayerGameboard(Game.playerBoard)\r\n    if (Game.playerBoard.isGameOver()) Game.endGame()\r\n    else Game.takesTurn = 'Player'\r\n  }\r\n\r\n  static async makePlayerMove(index) {\r\n    if (Game.takesTurn === 'Player') {\r\n      Game.player.attack(index, Game.enemyBoard)\r\n      UI.renderEnemyGameboard(Game.enemyBoard)\r\n\r\n      if (Game.enemyBoard.isGameOver()) Game.endGame()\r\n      else {\r\n        Game.takesTurn = 'Enemy'\r\n        // await Game.sleepRandomTimeBetween(300, 600) // TODO: Uncomment\r\n        Game.makeEnemyMove()\r\n      }\r\n    }\r\n  }\r\n\r\n  // Utility\r\n  static sleepRandomTimeBetween(minMs, maxMs) {\r\n    const randomTimeMs = Math.floor(Math.random() * (maxMs - minMs + 1) + minMs)\r\n    // eslint-disable-next-line no-promise-executor-return\r\n    return new Promise((resolve) => setTimeout(resolve, randomTimeMs))\r\n  }\r\n}\r\n","import Game from './modules/game'\r\n\r\ndocument.addEventListener('DOMContentLoaded', Game.initGame)\r\n"],"names":["length","Error","hitCount","hit","this","isSunk","board","Array","fill","map","hasShip","isShot","convertTo2DIndex","index1D","indexStr","toString","row","col","Number","createLocationArray","ship","location","axis","locationArray","i","push","getNeighborArray","shipLocationArray","surroundings","Set","neighborPattern","locationIndex2D","n","x","y","boardMaxIndexSize","boardSize","add","join","forEach","num","includes","delete","from","checkCollisions","some","loc","every","indexes","isPlacementValid","neighbors","shipNeighborArray","neighborIdx","checkIfShotHit","placeShip","toUpperCase","receiveAttack","isGameOver","shipSet","sunkShipsCounter","cell","size","name","attack","gameboard","makeRandomAttack","randomLoc","array","reduce","acc","curr","idx","Math","floor","random","UI","static","pBoard","document","querySelector","eBoard","renderGridCells","gridElement","createElement","classList","appendChild","cellElement","img","src","height","width","dot","cellsElementNodeList","remove","replaceChildren","pBoardCells","querySelectorAll","eBoardCells","clearGameboardCells","obj","renderHit","renderShipCell","renderMiss","clearOverlay","modalDiv","mainHeader","textContent","placementHeader","placementSpan","typeSpan","append","placementContainerDiv","rotateBtn","setAttribute","rotateBtnText","rotateBtnImg","startBtn","showOverlay","e","boardElement","callbackFn","getAttribute","child","target","prototype","indexOf","call","children","contains","console","log","placementValidationCheckFn","placementFn","shipsArr","placementBoard","addEventListener","placementBoardHoverHandler","placementBoardClickHandler","button","rotateBtnEventHandler","makeMoveFn","boardEventHandler","Game","loadGameUI","preGameShipPlacement","initEnemyBoardEventListener","makePlayerMove","pShip1","pShip2","pShip3","pShip4","pShip5","eShip1","eShip2","eShip3","eShip4","eShip5","playerBoard","enemyBoard","renderPlayerGameboard","renderEnemyGameboard","ships","renderPlacementOverlay","initRotateBtnEventListener","initPlacementBoardEventListeners","player","enemy","takesTurn","setShipLocations","renderEndGame","clearAllGameboardCells","resetGameState","endGame","index","makeEnemyMove","minMs","maxMs","randomTimeMs","Promise","resolve","setTimeout","initGame"],"sourceRoot":""}